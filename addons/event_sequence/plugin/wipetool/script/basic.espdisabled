@tool
extends EventItemBase

func get_name() -> String:
	return "Close/Open Wipe"

func get_description() -> String:
	return "Start and/or end a wipe transition"

func is_allow_in_editor() -> bool:
	return true

func get_first_column_config() -> Dictionary:
	return {
		"name": "None",
		"editable": false,
		"cell_mode": TreeItem.CELL_MODE_STRING
	}

func get_second_column_config() -> Dictionary:
	return {
		"name": "Config",
		"editable": true,
		"cell_mode": TreeItem.CELL_MODE_CUSTOM
	}

func get_userdata_keys() -> Array[Dictionary]:
	return [
		{
			EventConst.userdata_key_name: "open",
			EventConst.userdata_key_display: "Wipe Open",
			EventConst.userdata_key_desc: "Play animation?",
			EventConst.userdata_key_type: TYPE_BOOL,
			EventConst.userdata_key_require: false,
			EventConst.userdata_key_default: true,
		},
		{
			EventConst.userdata_key_name: "close",
			EventConst.userdata_key_display: "Wipe Close",
			EventConst.userdata_key_desc: "Play animation?",
			EventConst.userdata_key_type: TYPE_BOOL,
			EventConst.userdata_key_require: false,
			EventConst.userdata_key_default: true,
		},
	]

func get_color() -> Color:
	return Color.GRAY

func get_icon_path() -> String:
	return "res://addons/event_sequence/plugin/wipetool/icon/Basic.svg"

func run(event_node: EventNode) -> EventConst.ItemResponseType:
	var is_open: bool = not userdata.has("open") or userdata["open"]
	var is_close: bool = not userdata.has("close") or userdata["close"]
	
	if is_open and is_close:
		WipeTool.wipe_close_and_open()
	else: if is_open:
		WipeTool.wipe_open()
	else: if is_close:
		WipeTool.wipe_close()
	
	return EventConst.ItemResponseType.OK
