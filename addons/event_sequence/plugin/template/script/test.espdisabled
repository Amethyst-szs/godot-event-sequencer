@tool
extends EventItemBase

func get_name() -> String:
	return "Example Item"

func get_description() -> String:
	return "A test item provived by the example plugin"

func is_allow_in_editor() -> bool:
	return true

func get_first_column_config() -> Dictionary:
	return {
		"name": "None",
		"editable": false,
		"cell_mode": TreeItem.CELL_MODE_STRING
	}

func get_second_column_config() -> Dictionary:
	return {
		"name": "Config",
		"editable": true,
		"cell_mode": TreeItem.CELL_MODE_CUSTOM
	}

func get_userdata_keys() -> Array[Dictionary]:
	return [
		{
			EventConst.userdata_key_name: "config1",
			EventConst.userdata_key_display: "First Config",
			EventConst.userdata_key_desc: "Editable Value",
			EventConst.userdata_key_type: TYPE_STRING,
			EventConst.userdata_key_require: true,
		},
		{
			EventConst.userdata_key_name: "config2",
			EventConst.userdata_key_desc: "Other editable Value",
			EventConst.userdata_key_type: TYPE_FLOAT,
			EventConst.userdata_key_require: true,
		},
	]

func get_color() -> Color:
	return Color.HOT_PINK

func get_icon_path() -> String:
	return "res://addons/event_sequence/icon/IconFlat.svg"

func run(event_node: EventNode) -> EventConst.ItemResponseType:
	print("Example item code!")
	return EventConst.ItemResponseType.OK
