@tool
extends EventItemBase

func get_name() -> String:
	return "Set Music Bus"

func get_description() -> String:
	return "Set which audio bus the music streams should play on. 
		Does not move currently playing music, just new music."

func is_allow_in_editor() -> bool:
	return true

func get_second_column_config() -> Dictionary:
	return {
		"name": "Config",
		"editable": true,
		"cell_mode": TreeItem.CELL_MODE_CUSTOM
	}

func get_userdata_keys() -> Array[Dictionary]:
	return [
		{
			EventConst.userdata_key_name: "bus",
			EventConst.userdata_key_display: "Bus Name",
			EventConst.userdata_key_desc: "Master",
			EventConst.userdata_key_type: TYPE_STRING,
			EventConst.userdata_key_require: true,
			EventConst.userdata_key_default: "",
		},
	]

func get_color() -> Color:
	return Color.hex(0xFF99DBFF)

func get_icon_path() -> String:
	return "res://addons/event_sequence/plugin/sound/icon/MusicBus.svg"

func run(event_node: EventNode) -> EventConst.ItemResponseType:
	if userdata.has("bus"):
		SoundManager.set_default_music_bus(userdata["bus"])
	
	return EventConst.ItemResponseType.OK

func _get_userdata_float(key: String, default: float) -> float:
	if userdata.has(key):
		return userdata[key]
	
	return default
